{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReqFlow","text":"<p>ReqFlow is a lightweight and flexible Python package designed to simplify API testing.  Providing an intuitive, fluent interface for crafting and validating HTTP API functionality. </p>"},{"location":"#installation","title":"Installation","text":"<p>Install ReqFlow using pip:</p> <pre><code>pip install reqflow\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Fluent API: ReqFlow's syntax is designed to be readable and expressive, making your tests easy to write and understand.</li> <li>Embedded Response Assertions: Assert of status codes, response bodies, headers, etc.</li> <li>PyDantic Integration: Validate reponse bodies agains PyDantic models for robust and flexible data validation.</li> <li>Extensible and Modular: ReqFlow is built to be flexible. Extend or customize it to fit your testing needs,  whether you're working with RESTful APIs, JSON, XML, or other data formats.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>To get started with the fundamentals of ReqFlow, check out the Quick Start page.</p> <p>For detailed information on each function and feature, check out the API Reference.</p>"},{"location":"assertions/","title":"Assertions","text":""},{"location":"assertions/#reqflow.assertions.contains_string","title":"<code>contains_string(expected)</code>","text":"<p>Asserts that the actual value contains the provided string.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The string to check for in the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import contains_string\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get?foo=bar\").then().assert_body(\"url\", contains_string(\"foo=bar\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value contains the provided string.</p>"},{"location":"assertions/#reqflow.assertions.equal_to","title":"<code>equal_to(expected)</code>","text":"<p>Asserts that the actual value is equal to the provided value.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The value to check for equality against the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import equal_to\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get?foo=bar\").then().assert_body(\"url\", equal_to(\"https://httpbin.org/get?foo=bar\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is equal to the provided value.</p>"},{"location":"assertions/#reqflow.assertions.not_equal_to","title":"<code>not_equal_to(expected)</code>","text":"<p>Asserts that the actual value is not equal to the provided value.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The value to check for inequality against the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import not_equal_to\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get?foo=bar\").then().assert_body(\"url\", not_equal_to(\"https://httpbin.org/get?foo=bar\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is not equal to the provided value.</p>"},{"location":"assertions/#reqflow.assertions.greater_than","title":"<code>greater_than(expected)</code>","text":"<p>Asserts that the actual value is greater than the provided value.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The value to check for greater than the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import greater_than\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"some_value\", greater_than(\"777\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is greater than the provided value.</p>"},{"location":"assertions/#reqflow.assertions.less_than","title":"<code>less_than(expected)</code>","text":"<p>Asserts that the actual value is less than the provided value.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The value to check for less than the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import greater_than\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"some_value\", less_than(\"777\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is less than the provided value.</p>"},{"location":"assertions/#reqflow.assertions.list_contains","title":"<code>list_contains(expected)</code>","text":"<p>Asserts that the actual value is contained in the response array list.</p> <p>Parameters:</p> Name Type Description Default <code>expected</code> <p>The list to check for the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import list_contains\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_array\", list_contains([\"foo\", \"bar\", \"baz\"]))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is contained in the provided list.</p>"},{"location":"assertions/#reqflow.assertions.is_none","title":"<code>is_none()</code>","text":"<p>Asserts that the actual value is None.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import is_none\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_value\", is_none())\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is None.</p>"},{"location":"assertions/#reqflow.assertions.is_not_none","title":"<code>is_not_none()</code>","text":"<p>Asserts that the actual value is not None.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import is_none\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_value\", is_not_none())\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value is not None.</p>"},{"location":"assertions/#reqflow.assertions.matches_regex","title":"<code>matches_regex(pattern)</code>","text":"<p>Asserts that the actual value matches the provided regex pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <p>A regex pattern to match against the actual value.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import matches_regex\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_value\", matches_regex(r\"^\\d{3}$\"))\n</code></pre> <p>Returns:</p> Type Description <p>An assertion function that checks if the actual value matches the provided regex pattern.</p>"},{"location":"assertions/#reqflow.assertions.and_","title":"<code>and_(*assertions)</code>","text":"<p>Combines multiple assertions with a logical AND, requiring all assertions to pass.</p> <p>Parameters:</p> Name Type Description Default <code>*assertions</code> <p>A variable number of assertion functions.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import and_, greater_than, less_than\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_value\", and_(greater_than(1), less_than(100)))\n</code></pre> <p>Returns:</p> Type Description <p>A combined assertion function that checks all provided assertions.</p>"},{"location":"assertions/#reqflow.assertions.or_","title":"<code>or_(*assertions)</code>","text":"<p>Combines multiple assertions with a logical OR, requiring at least one assertion to pass.</p> <p>Parameters:</p> Name Type Description Default <code>*assertions</code> <p>A variable number of assertion functions.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client, given\n&gt;&gt;&gt; from reqflow.assertions import or_, greater_than, less_than\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\").then().assert_body(\"json.some_value\", or_(greater_than(1), less_than(100)))\n</code></pre> <p>Returns:</p> Type Description <p>A combined assertion function that checks if any of the provided assertions pass.</p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#reqflow.client.Client","title":"<code>Client</code>","text":"<p>A client for sending HTTP requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import Client\n&gt;&gt;&gt;\n&gt;&gt;&gt; client = Client(base_url=\"https://some_url.com\")\n</code></pre>"},{"location":"client/#reqflow.client.Client.__init__","title":"<code>__init__(base_url='', logging=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL for all requests sent by this client. The URL parameter is optional and can be overridden by the URL parameter in when() method.</p> <code>''</code> <code>logging</code> <code>bool</code> <p>If True, logs will be stored for each request sent by this client.</p> <code>False</code>"},{"location":"fluent_api/","title":"Fluent API","text":""},{"location":"fluent_api/#reqflow.fluent_api.Given","title":"<code>Given</code>","text":"<p>Represents the Given stage of the request where you can specify parameters, headers, cookies and the body of the request.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client instance to use for making the request.</p> required"},{"location":"fluent_api/#reqflow.fluent_api.Given.query_param","title":"<code>query_param(params)</code>","text":"<p>Adds a query parameter to the request.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Any]</code> <p>A dictionary of query parameters to add.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; params = {'chocolate': 'chip'}\n&gt;&gt;&gt; r = given(client).query_param(params).when(\"GET\", \"/cookies/set\").then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.cookies","title":"<code>cookies(cookies)</code>","text":"<p>Adds multiple cookies to the request.</p> <p>Parameters:</p> Name Type Description Default <code>cookies</code> <code>Dict[str, Any]</code> <p>A dictionary of cookies to add.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; cks = {\"cookie1\": \"value1\", \"cookie2\": \"value2\"}\n&gt;&gt;&gt; given(client).cookies(cks).when(\"GET\", \"/cookies\").then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.header","title":"<code>header(key, value)</code>","text":"<p>Adds a header to the request.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the header.</p> required <code>value</code> <code>Any</code> <p>The value of the header.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).header(\"Authorization\", \"Bearer TOKEN\").when(\"GET\", \"/headers\").then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.headers","title":"<code>headers(headers)</code>","text":"<p>Adds multiple headers to the request.</p> <p>Parameters:</p> Name Type Description Default <code>headers</code> <code>Dict[str, Any]</code> <p>A dictionary of headers to add.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; HEADERS = {'Authorization': 'Bearer TOKEN', 'test_header': 'test_value'}\n&gt;&gt;&gt; given(client).headers(HEADERS).                  when(\"GET\", \"/headers\").                  then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.body","title":"<code>body(content=None, *, json=None, data=None)</code>","text":"<p>Sets the body of the request. Either <code>json</code> or <code>data</code> can be set, but not both.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>dict</code> <p>Shortcut for setting JSON data directly. Defaults to None.</p> <code>None</code> <code>json</code> <code>Any</code> <p>The JSON body to set for the request. Defaults to None.</p> <code>None</code> <code>data</code> <code>Any</code> <p>The form data to send in the body of the request. Defaults to None.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; # Using `content` as a shortcut for JSON data\n&gt;&gt;&gt; given(client).body({\"key\": \"value\"}).when(\"POST\", \"/post\").then()...\n&gt;&gt;&gt; # Explicitly using `json` parameter\n&gt;&gt;&gt; given(client).body(json={\"key\": \"value\"}).when(\"POST\", \"/post\").then()...\n&gt;&gt;&gt; # Using `data` for form data\n&gt;&gt;&gt; given(client).body(data=\"key=value\").when(\"POST\", \"/post\").then()...\n</code></pre> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both <code>json</code> and <code>data</code> are provided.</p> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.file_upload","title":"<code>file_upload(field_name, file_path)</code>","text":"<p>Sets the file to upload for the request. Args:     field_name (str): The name of the form field the file is associated with.     file_path (str): The path to the file to be uploaded.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).file_upload(\"userfile\", \"data/test.png\").            &gt;&gt;&gt;     when(\"POST\", \"/doc/file_upload.html\").then()...\n</code></pre> Note <p><code>field_name</code> must be the same as the name of the form field in the request.</p> <p>Returns:</p> Name Type Description <code>Given</code> <code>Given</code> <p>The instance of the Given class for chaining.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Given.when","title":"<code>when(method=None, url='')</code>","text":"<p>Transitions from the Given stage to the When stage, where the request is made.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method to use.</p> <code>None</code> <code>url</code> <code>str</code> <p>The URL to send the request to.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then()...\n</code></pre> Note <p>If the <code>url</code> is not provided, the <code>url</code> provided in the Client instance will be used.</p> <p>Returns:</p> Name Type Description <code>When</code> <code>When</code> <p>The instance of the When class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When","title":"<code>When</code>","text":"<p>Represents the When stage of the request where the actual request is made.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When.__init__","title":"<code>__init__(client, method, url='', params=None, headers=None, json=None, data=None, cookies=None, files=None)</code>","text":"<p>Initializes the When class with the details of the request to be made.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client instance to use for making the request.</p> required <code>method</code> <code>str</code> <p>The HTTP method to use for the request.</p> required <code>url</code> <code>str</code> <p>The URL to send the request to.</p> <code>''</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of query parameters.</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of request headers.</p> <code>None</code> <code>json</code> <code>Optional[Any]</code> <p>Optional JSON body for the request.</p> <code>None</code>"},{"location":"fluent_api/#reqflow.fluent_api.When.with_auth","title":"<code>with_auth(username, password)</code>","text":"<p>Adds basic authentication to the request.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username for basic auth.</p> required <code>password</code> <code>str</code> <p>The password for basic auth.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/basic-auth/user/pass\").with_auth(\"user\", \"pass\").then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>When</code> <code>When</code> <p>The instance of the When class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When.with_oauth2","title":"<code>with_oauth2(token)</code>","text":"<p>Adds OAuth2 authentication to the request.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The OAuth2 token to use for auth.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; token = \"some_token\"\n&gt;&gt;&gt; given(client).when(\"GET\", \"/bearer\").with_oauth2(token).then()...\n</code></pre> <p>Returns:</p> Name Type Description <code>When</code> <code>When</code> <p>The instance of the When class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When.with_api_key","title":"<code>with_api_key(key, value)</code>","text":"<p>Adds API key authentication to the request.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the API key.</p> required <code>value</code> <code>str</code> <p>The value of the API key.</p> required <p>Returns:</p> Name Type Description <code>When</code> <code>When</code> <p>The instance of the When class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When.then","title":"<code>then(follow_redirects=False, timeout=5.0, force_json_decoding=False)</code>","text":"<p>Transitions from the When stage to the Then stage, where the response is handled.</p> <p>Parameters:</p> Name Type Description Default <code>follow_redirects</code> <code>bool</code> <p>httpx parameter to follow redirects or not. Defaults to False.</p> <code>False</code> <code>timeout</code> <code>float</code> <p>The timeout for the request in seconds. Defaults to 5.0.</p> <code>5.0</code> <code>force_json_decoding</code> <code>bool</code> <p>If True, forces JSON decoding of the response despite response headers. Defaults to False. The default behavior is to decode JSON only if the response content type is 'application/json'.</p> <code>False</code> <p>Note:     The actual request is made when this method is called.</p> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class with the response from the request.</p>"},{"location":"fluent_api/#reqflow.fluent_api.When.then_async","title":"<code>then_async(follow_redirects=False, timeout=5.0, force_json_decoding=False)</code>  <code>async</code>","text":"<p>Async version of the <code>then</code> method awaiting the response.</p> <p>Parameters:</p> Name Type Description Default <code>follow_redirects</code> <code>bool</code> <p>httpx parameter to follow redirects or not. Defaults to False.</p> <code>False</code> <code>timeout</code> <code>float</code> <p>The timeout for the request in seconds. Defaults to 5.0.</p> <code>5.0</code> <code>force_json_decoding</code> <code>bool</code> <p>If True, forces JSON decoding of the response despite response headers. Defaults to False. The default behavior is to decode JSON only if the response content type is 'application/json'.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class with the response from the request</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then","title":"<code>Then</code>","text":"<p>Represents the Then stage of the request where the response is handled and assertions are made.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.__init__","title":"<code>__init__(response, client)</code>","text":"<p>Initializes the Then class with the response to handle.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>UnifiedResponse</code> <p>The response from the request.</p> required <code>client</code> <code>Client</code> <p>The client instance used for making the request.</p> required"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_response","title":"<code>get_response()</code>","text":"<p>Retrieves the response object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; r = given(client).when(\"GET\", \"/get\").then().get_response()\n&gt;&gt;&gt; r.status_code\n&gt;&gt;&gt; 200\n</code></pre> <p>Returns:</p> Name Type Description <code>UnifiedResponse</code> <code>UnifiedResponse</code> <p>The response from the request.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.validate_data","title":"<code>validate_data(expected_model)</code>","text":"<p>Validates the response data against the expected Pydantic model.</p> <p>Parameters:</p> Name Type Description Default <code>expected_model</code> <code>Type[BaseModel]</code> <p>The Pydantic model to validate the response data against.</p> required <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the response data does not match the expected model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt;\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Data(BaseModel):\n&gt;&gt;&gt;     url: str\n&gt;&gt;&gt;     args: dict\n&gt;&gt;&gt;     headers: dict\n&gt;&gt;&gt;     origin: str\n&gt;&gt;&gt;     method: str\n&gt;&gt;&gt;     ...\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().validate_data(Data)\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.status_code","title":"<code>status_code(expected_status_code)</code>","text":"<p>Asserts that the response status code matches the expected status code.</p> <p>Parameters:</p> Name Type Description Default <code>expected_status_code</code> <code>int</code> <p>The expected status code of the response.</p> required <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the response status code does not match the expected status code.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().status_code(200)\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.status_code_is_between","title":"<code>status_code_is_between(min_status_code, max_status_code)</code>","text":"<p>Asserts that the response status code is within the specified range.</p> <p>Parameters:</p> Name Type Description Default <code>min_status_code</code> <code>int</code> <p>The minimum acceptable status code.</p> required <code>max_status_code</code> <code>int</code> <p>The maximum acceptable status code.</p> required <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the response status code is not within the specified range.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().status_code_is_between(200, 299)\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_body","title":"<code>assert_body(json_path, expected_value)</code>","text":"<p>Asserts that a specific part of the response body matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <code>str</code> <p>The JSONPath expression to locate the part of the response body to assert.</p> required <code>expected_value</code> <code>Any</code> <p>The expected value to compare against.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the JSONPath does not match any elements in the JSON response.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; from reqflow.assertions import equal_to\n&gt;&gt;&gt;\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; payload = {\"foo\": \"bar\"}\n&gt;&gt;&gt; given(client).body(payload).when(\"POST\", \"/post\").then().assert_body(\"json.foo\", equal_to(\"bar\"))\n</code></pre> Note <p>The <code>jsonpath-ng</code> expression is evaluated against the response body as a JSON object.</p> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_body_text","title":"<code>assert_body_text(expected_value)</code>","text":"<p>Asserts that the response body matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>expected_value</code> <code>str</code> <p>The expected value to compare against.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; from reqflow.assertions import equal_to\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().assert_body_text(\"Hello, World!\")\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_content","title":"<code>get_content()</code>","text":"<p>Retrieves the content of the response body.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; r = given(client).when(\"GET\", \"/get\").then().get_content()\n</code></pre> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The content of the response body.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_header","title":"<code>get_header(header_name)</code>","text":"<p>Retrieves the value of a specific header from the response.</p> <p>Parameters:</p> Name Type Description Default <code>header_name</code> <code>str</code> <p>The name of the header to retrieve.</p> required <p>Examples     &gt;&gt;&gt; from reqflow import given, Client     &gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")     &gt;&gt;&gt; r = given(client).when(\"GET\", \"/get\").then().get_header(\"Content-Type\")     &gt;&gt;&gt; r     &gt;&gt;&gt; \"application/json\"</p> <p>Returns:</p> Name Type Description <code>str</code> <code>Any</code> <p>The value of the specified header.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_headers","title":"<code>get_headers()</code>","text":"<p>Retrieves all headers from the response.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; r = given(client).when(\"GET\", \"/get\").then().get_headers()\n&gt;&gt;&gt; r\n&gt;&gt;&gt; {\"Content-Type\": \"application/json\", \"Content-Length\": \"123\"}\n</code></pre> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary of all headers in the response.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_encoding","title":"<code>get_encoding()</code>","text":"<p>Retrieves the encoding of the response.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; r = given(client).when(\"GET\", \"/get\").then().get_encoding()\n&gt;&gt;&gt; r\n&gt;&gt;&gt; \"utf-8\"\n</code></pre> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The encoding of the response.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_header","title":"<code>assert_header(header_name, expected_value)</code>","text":"<p>Asserts that a specific header matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>header_name</code> <code>str</code> <p>The name of the header to assert.</p> required <code>expected_value</code> <code>Any</code> <p>The expected value of the header.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; from reqflow.assertions import equal_to\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().assert_header(\"Content-Type\", equal_to(\"application/json\"))\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_header_exists","title":"<code>assert_header_exists(header_name)</code>","text":"<p>Asserts that a specific header exists in the response.</p> <p>Parameters:</p> Name Type Description Default <code>header_name</code> <code>str</code> <p>The name of the header to assert.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().assert_header_exists(\"Content-Type\")\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_response_time","title":"<code>assert_response_time(max_time)</code>","text":"<p>Asserts that the response time is less than or equal to the specified maximum time.</p> <p>Parameters:</p> Name Type Description Default <code>max_time</code> <code>float</code> <p>The maximum expected response time in seconds.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/get\").then().assert_response_time(1.0)\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class for fluent chaining.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the response time exceeds the maximum expected time.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.assert_cookie","title":"<code>assert_cookie(cookie_name, expected_value)</code>","text":"<p>Asserts that a specific cookie matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>cookie_name</code> <code>str</code> <p>The name of the cookie to assert.</p> required <code>expected_value</code> <code>Any</code> <p>The expected value of the cookie.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; from reqflow.assertions import equal_to\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).query_param('chocolate', 'chip').when(\"GET\", \"/cookies/set\").then()            &gt;&gt;&gt;                                      .assert_cookie(\"chocolate\", equal_to(\"chip\"))\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.get_cookies","title":"<code>get_cookies()</code>","text":"<p>Retrieves all cookies from the response.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).query_param('chocolate', 'chip').when(\"GET\", \"/cookies/set\").then().get_cookies()\n&gt;&gt;&gt; {'chocolate': 'chip'}\n</code></pre> <p>Returns:     dict: A dictionary of all cookies in the response.</p>"},{"location":"fluent_api/#reqflow.fluent_api.Then.save_response_to_file","title":"<code>save_response_to_file(file_path)</code>","text":"<p>Saves the response content to a specified file. Useful for downloading files.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path where the response content should be saved.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://httpbin.org\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/image/png\").then().save_response_to_file(\"image.png\")\n</code></pre> <p>Returns:</p> Name Type Description <code>Then</code> <code>Then</code> <p>The instance of the Then class.</p>"},{"location":"fluent_api/#reqflow.fluent_api.given","title":"<code>given(client=None, url=None, logging=False)</code>","text":"<p>Initializes the Given stage with a client instance or a URL. If the client is not provided, the URL can be provided directly.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client instance to use for making the request.</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>If the client is not provided, the URL can be provided directly. The client will be initialized with the URL as base_url.</p> <code>None</code> <code>logging</code> <code>bool</code> <p>If True, logs will be stored in GlobalLogger class.</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow import given, Client\n&gt;&gt;&gt; client = Client(base_url=\"https://url.com\")\n&gt;&gt;&gt; given(client).when(\"GET\", \"/path\").then().status_code(200)\n&gt;&gt;&gt; # OR\n&gt;&gt;&gt; given(url=\"https://url.com\").when(\"GET\", \"/path\").then().status_code(200)\n&gt;&gt;&gt; # OR\n&gt;&gt;&gt; given(url=\"https://url.com\", logging=True).when(\"GET\", \"/path\").then().status_code(200)\n</code></pre> <p>Returns:</p> Name Type Description <code>Given</code> <code>class</code> <p>An instance of the Given class initialized with the provided client.</p>"},{"location":"logger/","title":"Logger","text":""},{"location":"logger/#reqflow.utils.logger.GlobalLogger","title":"<code>GlobalLogger</code>","text":"<p>A global logger to store all the requests made by the client.</p>"},{"location":"logger/#reqflow.utils.logger.GlobalLogger.log_request","title":"<code>log_request(log)</code>  <code>classmethod</code>","text":"<p>Add a log entry to the logs list. Args:     log: A dictionary containing the log entry.</p>"},{"location":"logger/#reqflow.utils.logger.GlobalLogger.get_logs","title":"<code>get_logs()</code>  <code>classmethod</code>","text":"<p>Get all the logs stored in the logger. Returns:     A list of log entries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow.utils.logger import GlobalLogger\n&gt;&gt;&gt;\n&gt;&gt;&gt; logs = GlobalLogger.get_logs()\n&gt;&gt;&gt; print(logs)\n&gt;&gt;&gt; [{'function': 'test_function', 'request': {'method': 'GET', 'url': 'https://some_url.com', 'params': {}, 'headers': {}, 'cookies': {}, 'json': None, 'data': None, 'redirect': 'auto', 'files': None, 'timeout': None}, 'response': {'status_code': 200, 'headers': {'Content-Type': 'application/json'}, 'content': b'{\"key\": \"value\"}', 'time': 0.123}}]\n</code></pre>"},{"location":"logger/#reqflow.utils.logger.GlobalLogger.clear_logs","title":"<code>clear_logs()</code>  <code>classmethod</code>","text":"<p>Clear all the logs stored in the logger.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow.utils.logger import GlobalLogger\n&gt;&gt;&gt;\n&gt;&gt;&gt; GlobalLogger.clear_logs()\n</code></pre>"},{"location":"logger/#reqflow.utils.logger.GlobalLogger.generate_html_report","title":"<code>generate_html_report(file_path='test_report.html', report_title='Test Report')</code>  <code>classmethod</code>","text":"<p>Generate an HTML report from the logs across all client instances. Args:     file_path: (str) The path/name to save the HTML report.     report_title: (str) The name of the report.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow.utils.logger import GlobalLogger\n&gt;&gt;&gt;\n&gt;&gt;&gt; GlobalLogger.generate_html_report(file_path=\"test_report.html\", report_title=\"Aggregated Requests\")\n</code></pre>"},{"location":"logger/#reqflow.utils.logger.GlobalLogger.generate_json_report","title":"<code>generate_json_report(file_path='test_report.json')</code>  <code>classmethod</code>","text":"<p>Generate a JSON report from the logs across all client instances. Args:     file_path: (str) The path/name to save the HTML report.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from reqflow.utils.logger import GlobalLogger\n&gt;&gt;&gt;\n&gt;&gt;&gt; GlobalLogger.generate_json_report(file_path=\"test_report.json\")\n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#start","title":"Start","text":"<p>Once ReqFlow is installed, start with importing the module along: <pre><code>from reqflow import given, Client\n</code></pre></p> <p>Let's make a simple request to HTTPBin API by create a new client and making a  <code>GET</code> request to the <code>/get</code> endpoint and asserting the response status code is <code>200</code>:</p> <pre><code>client = Client(\"https://httpbin.org\")\ngiven(client).when(\"GET\", \"/get\").then().status_code(200)\n</code></pre> <p>Alternatively, the request can be sent without explicitly defined client object:</p> <p><pre><code>given(url=\"https://httpbin.org\").when(\"GET\", \"/get\").then().status_code(200)\n</code></pre> For other HTTP methods, you can use the <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, <code>HEAD</code>, <code>OPTIONS</code> parameters:</p> <pre><code>PAYLOAD = {\"foo\": \"bar\"}\n\ngiven(client).body(PAYLOAD).when(\"POST\", \"/post\").then()...\n\ngiven(client).body(PAYLOAD).when(\"PUT\", \"/put\").then()...\n\ngiven(client).body(PAYLOAD).when(\"PATCH\", \"/patch\").then()...\n\ngiven(client).when(\"DELETE\", \"/delete\").then()...\n\n...\n</code></pre>"},{"location":"quick_start/#headers","title":"Headers","text":"<p>To set a header for your request, one can use the <code>header</code> method traling the <code>given</code> method:</p> <pre><code>given(client).header(\"Content-Type\", \"application/json\")\\\n    .when(\"POST\", \"/post\")\\\n    .then()...\n</code></pre> <p>In case you want to set multiple headers, you can use the <code>headers</code> method:</p> <pre><code>HEADERS = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\ngiven(client).headers(HEADERS).when(\"POST\", \"/post\").then()...\n</code></pre> <p>To retrieve one or multiple response headers:</p> <pre><code>hdr = given(client).when(\"GET\", \"/get\").then().get_header(\"Content-Type\")\nhdr\n&gt;&gt;&gt; \"application/json\"\n\nhdrs = given(client).when(\"GET\", \"/get\").then().get_headers()\nhdrs\n&gt;&gt;&gt; {\"Content-Type\": \"application/json\", \"Content-Length\": \"1234\", ...}\n</code></pre>"},{"location":"quick_start/#query-parameters","title":"Query parameters","text":"<p>To set up query parameters in the URL, use the <code>query_param</code> method:</p> <pre><code>PARAMS = {\"foo\": \"bar\"}\ngiven(client).query_param(PARAMS).when(\"GET\", \"/get\").then()...\n</code></pre>"},{"location":"quick_start/#response-operations","title":"Response operations","text":"<p>If you want to retrieve the response object, you can use the <code>then.().get_response()</code> method:</p> <pre><code>r = given(client).when(\"GET\").then().get_response()\nr\n&gt;&gt;&gt; &lt;UnifiedResponse object at 0x108f81es0&gt;\n</code></pre> <p>Note</p> <p>The API reference for the <code>UnifiedResponse</code> object can be found here.</p> <p>To retrieve the response content, you can use the <code>then.().get_content()</code> method:</p> <pre><code>data = given(client).when(\"GET\").then().get_content()\ndata\n&gt;&gt;&gt; {...}\n</code></pre>"},{"location":"quick_start/#cookies","title":"Cookies","text":"<p>To set a cookie for your request, one can use the <code>cookie</code> method trailing the <code>given</code> method:</p> <pre><code>cks = {\"cookie1\": \"value1\", \"cookie2\": \"value2\"}\ngiven(client).cookies(cks).when(\"GET\", \"https://httpbin.org/cookies\")\\\n    .then()...\n</code></pre> <p>To retrieve one or multiple response cookies:</p> <pre><code>cks = given(client).when(\"GET\", \"https://httpbin.org/cookies\")\\\n    .then().get_cookies()\nck\n&gt;&gt;&gt; {\"cookie1\": \"value1\", \"cookie2\": \"value2\"}\n</code></pre>"},{"location":"quick_start/#authentication","title":"Authentication","text":"<p>Reqflow supports the following authentication methods: * Basic Authentication * OAuth2.0 Authentication * API Keys</p>"},{"location":"quick_start/#basic-authentication","title":"Basic Authentication","text":"<p>To set up basic authentication, use the <code>with_auth</code> method trailing the <code>when</code> method:</p> <pre><code>given(client)\\\n        .when(\"GET\", \"/basic-auth/user/passwd\").with_auth(\"user\", \"passwd\")\\\n        .then()...\n</code></pre>"},{"location":"quick_start/#oauth2-authentication-bearer-token","title":"OAuth2 Authentication (Bearer Token)","text":"<p>The Bearer token can be set either explicitly in header or via the <code>with_oauth2</code> method:</p> <pre><code>given(client).when(\"GET\", \"/bearer\").with_oauth2(token)\\\n        .then()...\n</code></pre>"},{"location":"quick_start/#api-keys","title":"API Keys","text":"<p>API Key authorization method represents a wrapper for setting a header with a known name and value in the form of an API key.</p> <pre><code>given(client).when(\"GET\", \"/bearer\").with_api_key(HEADER_NAME, API_KEY)\\\n        .then()...\n</code></pre>"},{"location":"quick_start/#assertions","title":"Assertions","text":"<p>ReqFlow provides a set of assertions to validate the response parameters as well as the embedded assertion functions to validate the response content.</p>"},{"location":"quick_start/#assertion-functions","title":"Assertion Functions","text":"<p>The following embedded assertion functions are available:</p> <ul> <li><code>contains_string()</code></li> <li><code>equal_to()</code></li> <li><code>not_equal_to()</code></li> <li><code>greater_than()</code></li> <li><code>less_than()</code></li> <li><code>list_contains()</code></li> <li><code>is_none()</code></li> <li><code>is_not_none()</code></li> <li><code>matches_regex()</code></li> <li><code>and_(*assertion_functions)</code></li> <li><code>or_(*assertion_functions)</code></li> </ul> <p>The list of assertion functions and with the descriptions can be found here.</p>"},{"location":"quick_start/#status-code","title":"Status Code","text":"<pre><code>given(client).when(\"GET\", \"/get\").then().status_code(200)\n</code></pre>"},{"location":"quick_start/#response-time","title":"Response Time","text":"<pre><code>given(client).when(\"GET\", \"/get?foo=bar\").then()\\\n    .assert_response_time(max_time=0.5)\n</code></pre>"},{"location":"quick_start/#cookies_1","title":"Cookies","text":"<pre><code>given(client).query_param(params).when(\"GET\", \"/cookies/set\").then()\\\n        .assert_cookie('chocolate', equal_to('chip'))\n</code></pre>"},{"location":"quick_start/#headers_1","title":"Headers","text":"<pre><code>    given(client).when(\"GET\", \"/get?foo=bar\")\\\n        .then().assert_header(\"Content-Type\", equal_to(\"application/json\"))\n</code></pre>"},{"location":"quick_start/#response-content","title":"Response Content","text":"<p>To validate a specific response content value, the <code>assert_body</code> can be used along with the embedded assertion functions. The parameter search is implemented by using the <code>jsonpath-ng</code> package.</p> <pre><code>given(client).when(\"GET\", \"/get?foo=bar\").then()\\\n    .status_code(200).\\\n    assert_body(\"args.foo\", equal_to(\"bar\"))\n</code></pre>"},{"location":"quick_start/#pydantic-response-validation","title":"PyDantic Response Validation","text":"<p>PyDantic integration allows to define precise data structures and use them as a blueprint for the response validation. The validation is performed by the <code>validate_data</code> method and passing the PyDantic model as a parameter.</p> <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    username: str\n    email: str\n    address: dict\n    phone: str\n    website: str\n    company: dict\n\ngiven(client).when(\"GET\", \"/users/1\").then()\\\n    .status_code(200)\\\n    .validate_data(User)\n</code></pre> <p>To ensure more integrity of your data, you can use various constrains provided by PyDantic.</p> <pre><code>from pydantic import BaseModel, Field, EmailStr, constr, condecimal\n\nclass Geo(BaseModel):\n    lat: condecimal(gt=-90, lt=90)\n    lng: condecimal(gt=-180, lt=180)\n\nclass Address(BaseModel):\n    street: constr(min_length=1, max_length=100)\n    suite: constr(min_length=1, max_length=100)\n    city: constr(min_length=1, max_length=100)\n    zipcode: constr(min_length=5, max_length=10)\n    geo: Geo\n\nclass Company(BaseModel):\n    name: constr(min_length=1, max_length=100)\n    catchPhrase: constr(min_length=1, max_length=255)\n    bs: constr(min_length=1, max_length=255)\n\nclass User(BaseModel):\n    id: int\n    name: constr(min_length=1, max_length=100)\n    username: constr(min_length=1, max_length=100)\n    email: EmailStr\n    address: Address\n    phone: constr(min_length=10, max_length=20, pattern=r'^\\+?\\d[\\d -]{8,12}\\d$')\n    website: constr(min_length=1, max_length=100)\n    company: Company\n\ngiven(client).when(\"GET\", \"/users/1\").then()\\\n    .status_code(200)\\\n    .validate_data(User)\n</code></pre> <p>You can also use decimal and float constraints to ensure numeric values fall within specific ranges or meet other conditions.</p> <pre><code>class FinancialData(BaseModel):\n    amount: condecimal(gt=0, max_digits=10, decimal_places=2)\n    interest_rate: Field(ge=0.0, le=1.0)\n\nclass UserFinancials(BaseModel):\n    id: int\n    name: str\n    balance: FinancialData\n\ngiven(client).when(\"GET\", \"/users/1/financials\").then()\\\n    .status_code(200)\\\n    .validate_data(UserFinancials)\n</code></pre>"},{"location":"quick_start/#upload-files","title":"Upload files","text":"<p>To upload a file to a particular endpoint, use the <code>file_upload</code> method specifying the <code>field_name</code> and the path to the file:</p> <pre><code>given(client).file_upload(field_name=\"userfile\", file_path=\"data/test.png\")\\\n    .when(\"POST\", \"/doc/file_upload.html\")\\\n    .then().status_code(200)\n</code></pre> <p>Note</p> <p><code>field_name</code> must be the same as the name of the form field in the request.</p>"},{"location":"quick_start/#download-files","title":"Download files","text":"<p>To download a file or save the response content to a file with a desired format, use the <code>save_response_to_file</code> method specifying the <code>file_path</code> parameter:</p> <pre><code>given(client).when(\"GET\").then()\\\n    .status_code(200)\\\n    .save_response_to_file(file_path=\"file.pdf\")\n</code></pre>"},{"location":"quick_start/#logging","title":"Logging","text":"<p>ReqFlow supports logging to aggregate the test results and provide a detailed overview of the execution across all client objects.  To enable logging, set the <code>logging</code> argument to <code>True</code> when creating a new client object:</p> <pre><code>client = Client(\"https://httpbin.org\", logging=True)\n</code></pre> <p>With the <code>logging</code> enabled, all requests/responses made by the client object will be stored in the <code>GlobalLogger</code> object</p> <pre><code>from reqflow.utils.logger import GlobalLogger\nfrom reqflow import Client, given\n\nclient = Client(base_url=\"https://httpbin.org\", logging=True)\ngiven(client).when(\"GET\", \"/get?foo=bar\").then().status_code(200)\n\nlogs = GlobalLogger.get_logs()\nprint(logs)\n\n&gt;&gt;&gt; [\n        {'function': 'test_function_name',\n        'request': {...request details...},\n        'response': {...response details...}\n    ]\n</code></pre> <p>The logger saves the following information: * <code>function</code> - the name of the test function (or the function from where the <code>then</code> method was called) * <code>request</code> - the request details (method, url, headers, body, query parameters, redirect and timeout options, cookies) * <code>response</code> - the response details (status code, headers, content, cookies, response time)</p>"},{"location":"quick_start/#generating-reports","title":"Generating Reports","text":""},{"location":"quick_start/#html-report","title":"HTML Report","text":"<p>To generate an HTML report, use the <code>generate_html_report</code> method from the <code>GlobalLogger</code> object:</p> <pre><code>from reqflow.utils.logger import GlobalLogger\nfrom reqflow import Client, given\n\nclient = Client(base_url=\"https://httpbin.org\", logging=True)\ngiven(client).when(\"GET\", \"/get?foo=bar\").then().status_code(200)\n# OR\ngiven(url=\"https://httpbin.org\", logging=True).when(\"GET\", \"/get?foo=bar\").then().status_code(200)\n\nGlobalLogger.generate_html_report(file_path=\"/path/to/report.html\", report_title=\"Smoke Test\")\n</code></pre>"},{"location":"quick_start/#json-report","title":"JSON Report","text":"<p>To generate a JSON report, use the <code>generate_json_report</code> method from the <code>GlobalLogger</code> object:</p> <pre><code>from reqflow.utils.logger import GlobalLogger\nfrom reqflow import Client, given\n\nclient = Client(base_url=\"https://httpbin.org\", logging=True)\ngiven(client).when(\"GET\", \"/get?foo=bar\").then().status_code(200)\n# OR\ngiven(url=\"https://httpbin.org\", logging=True).when(\"GET\", \"/get?foo=bar\").then().status_code(200)\n\n\nGlobalLogger.generate_json_report(file_path=\"/path/to/report.json\")\n</code></pre>"},{"location":"quick_start/#pytest-integration","title":"PyTest Integration","text":"<p>To integrate ReqFlow reporting/logging with PyTest, one can use PyTest's fixtures and hooks in the <code>conftest.py</code> file:</p> <pre><code>import pytest\nfrom reqflow.utils.logger import GlobalLogger\n\n@pytest.hookimpl(tryfirst=True, hookwrapper=True)\ndef pytest_runtest_protocol(item, nextitem):\n    yield\n\n@pytest.hookimpl\ndef pytest_sessionfinish(session, exitstatus):\n    logs = GlobalLogger.get_logs()\n    if logs:\n        GlobalLogger.generate_html_report(file_path=\"test_report.html\", report_title=\"Aggregated Requests\")\n        GlobalLogger.generate_json_report(file_path=\"test_report.json\")\n    GlobalLogger.clear_logs()\n</code></pre> <p>With the example above, the report will be generated after the test session is finished.  The results will be aggregated across all test functions and clients within the session.</p>"},{"location":"quick_start/#asynchronous-functionality-in-reqflow","title":"Asynchronous Functionality in ReqFlow","text":""},{"location":"quick_start/#why-use-async-in-api-testing","title":"Why Use Async in API Testing","text":"<p>Asynchronous programming enhances the performance and responsiveness of applications that involve I/O-bound operations, such as API testing or general network communication. Here are some key benefits:</p> <ol> <li>Concurrent Requests: Async allows multiple requests to be performed concurrently, which is beneficial when testing endpoints that can handle simultaneous connections.</li> <li>Improved Performance: Asynchronous code can lead to better performance and resource utilization since it does not block execution while waiting for I/O operations to complete.</li> <li>Scalability: Async is more scalable for applications that need to handle many simultaneous requests, reducing overhead compared to synchronous execution.</li> </ol>"},{"location":"quick_start/#how-to-use-async-with-reqflow","title":"How to Use Async with ReqFlow","text":"<p>ReqFlow simplifies switching between synchronous and asynchronous requests. To use async functionality, replace the <code>then</code> method with <code>then_async</code>. Because of the nature of async programming, the <code>then_async</code> method returns a coroutine object that needs to be awaited. Hence, the following validations e.g. <code>status_code</code>, <code>assert_body</code>, etc. should be performed after awaiting the <code>then_async</code> method.</p>"},{"location":"quick_start/#managing-the-client","title":"Managing the Client","text":"<p>When using async with ReqFlow, it is important to manage the lifecycle of the <code>Client</code> to ensure resources are properly cleaned up. There are three primary methods for managing the client:</p> <ol> <li>Direct Instantiation: Create and close the client within each test.</li> <li>Context Manager: Use the <code>with</code> context manager to automatically handle client closure.</li> <li>Use embedded client: Use the <code>url</code> parameter in the <code>given</code> method to manage the client lifecycle internally so that the client is created and closed automatically for each request.</li> </ol>"},{"location":"quick_start/#using-async-with-pytest","title":"Using Async with PyTest","text":"<p>To run asynchronous tests with PyTest, use the <code>pytest-asyncio</code> plugin, which allows defining async tests with <code>async def</code> and using the <code>pytest.mark.asyncio</code> decorator.</p>"},{"location":"quick_start/#direct-instantiation","title":"Direct Instantiation","text":"<pre><code>@pytest.mark.asyncio\nasync def test_get_request_async():\n    client = Client(base_url=\"https://httpbin.org\")\n    result = await given(client).when(\"GET\", \"/get?foo=bar\").then_async()\n    result.status_code(200).assert_body(\"args.foo\", equal_to(\"bar\"))\n\n@pytest.mark.asyncio\nasync def test_post_request_async():\n    client = Client(base_url=\"https://httpbin.org\")\n    payload = {\"foo\": \"bar\"}\n    result = await given(client).body(payload).when(\"POST\", \"/post\").then_async()\n    result.status_code(200).assert_body(\"json.foo\", equal_to(\"bar\"))\n</code></pre>"},{"location":"quick_start/#context-manager","title":"Context Manager","text":"<pre><code>@pytest.mark.asyncio\nasync def test_get_request_with_context_manager_async():\n    async with Client(base_url=\"https://httpbin.org\") as client:\n        result = await given(client).when(\"GET\", \"/get?foo=bar\").then_async()\n        result.status_code(200).assert_body(\"args.foo\", equal_to(\"bar\"))\n\n@pytest.mark.asyncio\nasync def test_post_request_with_context_manager_async():\n    async with Client(base_url=\"https://httpbin.org\") as client:\n        payload = {\"foo\": \"bar\"}\n        result = await given(client).body(payload).when(\"POST\", \"/post\").then_async()\n        result.status_code(200).assert_body(\"json.foo\", equal_to(\"bar\"))\n</code></pre>"},{"location":"quick_start/#using-embedded-client","title":"Using Embedded Client","text":"<pre><code>@pytest.mark.asyncio\nasync def test_get_request_with_embedded_client_async():\n    result = await given(url=\"https://httpbin.org\").when(\"GET\", \"/get?foo=bar\").then_async()\n    result.status_code(200).assert_body(\"args.foo\", equal_to(\"bar\"))\n\n@pytest.mark.asyncio\nasync def test_post_request_with_embedded_client_async():\n    payload = {\"foo\": \"bar\"}\n    result = await given(url=\"https://httpbin.org\").body(payload).when(\"POST\", \"/post\").then_async()\n    result.status_code(200).assert_body(\"json.foo\", equal_to(\"bar\"))\n</code></pre>"},{"location":"quick_start/#making-concurrent-requests-with-async","title":"Making Concurrent Requests with Async","text":"<p>One of the key advantages of using async is the ability to perform concurrent requests, significantly improving performance when dealing with multiple endpoints or repeated requests.</p> <pre><code>import pytest\nimport asyncio\nfrom reqflow import Client, given\nfrom reqflow.assertions import equal_to\n\n\n@pytest.mark.asyncio\nasync def test_concurrent_requests():\n    async with Client(base_url=\"https://httpbin.org\") as client:\n        tasks = [\n            given(client).when(\"GET\", \"/get?foo=bar\").then_async(),\n            given(client).when(\"GET\", \"/ip\").then_async(),\n            given(client).when(\"GET\", \"/user-agent\").then_async()\n        ]\n\n        results = await asyncio.gather(*tasks)\n\n        for result in results:\n            result.status_code(200)\n\n\n@pytest.mark.asyncio\nasync def test_concurrent_post_requests():\n    async with Client(base_url=\"https://httpbin.org\") as client:\n        payloads = [{\"foo\": f\"value{i}\"} for i in range(3)]\n        tasks = [given(client).body(payload).when(\"POST\", \"/post\").then_async() for payload in payloads]\n\n        results = await asyncio.gather(*tasks)\n\n        for result in results:\n            result.status_code(200).assert_body(\"json.foo\", equal_to(result.request.json[\"foo\"]))\n</code></pre>"},{"location":"quick_start/#performance-comparison-sync-vs-async","title":"Performance Comparison - Sync vs Async","text":"<p>To demonstrate the performance benefits of async requests, we can compare the execution time of synchronous and asynchronous tests.</p> <pre><code>import pytest\nimport time\nimport asyncio\nfrom reqflow import Client, given\n\n@pytest.mark.parametrize(\"test_data\", [\n    ([\"/get\", \"/ip\", \"/user-agent\"], [{\"test\": f\"value{i}\"} for i in range(50)])\n])\ndef test_sync_performance(test_data):\n    endpoints, param_list = test_data\n    client = Client(base_url=\"https://httpbin.org\")\n\n    start_time = time.time()\n\n    results = []\n    for params in param_list:\n        for endpoint in endpoints:\n            result = given(client).query_param(params).when(\"GET\", endpoint).then()\n            results.append(result)\n            result.status_code(200)\n\n    end_time = time.time()\n\n    total_duration = end_time - start_time\n    print(f\"Synchronous requests to {endpoints} with diverse params total duration: {total_duration} seconds\")\n\n\n@pytest.mark.asyncio\n@pytest.mark.parametrize(\"test_data\", [\n    ([\"/get\", \"/ip\", \"/user-agent\"], [{\"test\": f\"value{i}\"} for i in range(50)])\n])\nasync def test_async_performance(test_data):\n    endpoints, param_list = test_data\n    async with Client(base_url=\"https://httpbin.org\") as client:\n        start_time = time.time()\n\n        tasks = [\n            given(client).query_param(params).when(\"GET\", endpoint).then_async()\n            for params in param_list\n            for endpoint in endpoints\n        ]\n\n        results = await asyncio.gather(*tasks)\n\n        end_time = time.time()\n\n        total_duration = end_time - start_time\n        print(f\"Asynchronous requests to {endpoints} with diverse params total duration: {total_duration} seconds\")\n\n        for result in results:\n            result.status_code(200)\n</code></pre> <p>As a result, the asynchronous test will complete significantly faster (2.7 sec) than the synchronous test (39 sec) due to the concurrent execution of requests:</p> <pre><code>======================= 2 passed, in 41.79s =======================\nPASSED                        [ 50%]Synchronous requests to ['/get', '/ip', '/user-agent'] with diverse params total duration: 38.94446110725403 seconds\nPASSED                       [100%]Asynchronous requests to ['/get', '/ip', '/user-agent'] with diverse params total duration: 2.7714710235595703 seconds\n</code></pre>"},{"location":"response/","title":"Response","text":""},{"location":"response/#reqflow.response.response.UnifiedResponse","title":"<code>UnifiedResponse</code>","text":"<p>A unified response object.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.encoding","title":"<code>encoding</code>  <code>property</code>","text":"<p>Returns the encoding of the response.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The encoding of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.content_type","title":"<code>content_type</code>  <code>property</code>","text":"<p>Returns the content type of the response from the corresponding header.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The content type of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.status_code","title":"<code>status_code</code>  <code>property</code>","text":"<p>Returns the status code of the response.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The status code of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Returns the headers of the response.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The headers of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.response_time","title":"<code>response_time</code>  <code>property</code>","text":"<p>Returns the response time of the response.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The response time of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.content","title":"<code>content</code>  <code>property</code>","text":"<p>Returns the content of the response.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The content of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.text","title":"<code>text</code>  <code>property</code>","text":"<p>Returns the text of the response.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text of the response.</p>"},{"location":"response/#reqflow.response.response.UnifiedResponse.errors","title":"<code>errors</code>  <code>property</code>","text":"<p>Returns the errors of the response.</p> <p>Returns:</p> Name Type Description <code>Any</code> <p>The errors of the response.</p>"}]}